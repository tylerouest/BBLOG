"use strict";

var _SimpleSchema = require("./SimpleSchema");

var _expect = _interopRequireDefault(require("expect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema', function () {
  describe('messages', function () {
    it('required', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: String
      });
      var context = schema.newContext();
      context.validate({});
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo is required');
    });
    it('minString', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: String,
          min: 2
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 'a'
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be at least 2 characters');
    });
    it('maxString', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: String,
          max: 2
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 'abc'
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo cannot exceed 2 characters');
    });
    it('minNumber', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Number,
          min: 2
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 1.5
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be at least 2');
    });
    it('maxNumber', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Number,
          max: 2
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 2.5
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo cannot exceed 2');
    });
    it('minNumberExclusive', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Number,
          min: 2,
          exclusiveMin: true
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 2
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be greater than 2');
    });
    it('maxNumberExclusive', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Number,
          max: 2,
          exclusiveMax: true
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 2
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be less than 2');
    });
    it('minDate', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Date,
          min: new Date(Date.UTC(2015, 11, 15, 0, 0, 0, 0))
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: new Date(Date.UTC(2015, 10, 15, 0, 0, 0, 0))
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be on or after 2015-12-15');
    });
    it('maxDate', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Date,
          max: new Date(Date.UTC(2015, 11, 15, 0, 0, 0, 0))
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: new Date(Date.UTC(2016, 1, 15, 0, 0, 0, 0))
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo cannot be after 2015-12-15');
    });
    it('badDate', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Date
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: new Date('invalid')
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo is not a valid date');
    });
    it('minCount', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Array,
          minCount: 2
        },
        'foo.$': Number
      });
      var context = schema.newContext();
      context.validate({
        foo: [1]
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('You must specify at least 2 values');
    });
    it('maxCount', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: Array,
          maxCount: 2
        },
        'foo.$': Number
      });
      var context = schema.newContext();
      context.validate({
        foo: [1, 2, 3]
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('You cannot specify more than 2 values');
    });
    it('noDecimal', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: _SimpleSchema.SimpleSchema.Integer
      });
      var context = schema.newContext();
      context.validate({
        foo: 1.5
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be an integer');
    });
    it('notAllowed', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: String,
          allowedValues: ['a', 'b', 'c']
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 'd'
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('d is not an allowed value');
    });
    it('expectedType', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: String
      });
      var context = schema.newContext();
      context.validate({
        foo: 1
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be of type String');
    });
    it('regEx built in', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: String,
          regEx: _SimpleSchema.SimpleSchema.RegEx.Email
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 'abc'
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo must be a valid email address');
    });
    it('regEx other', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: String,
          regEx: /def/g
        }
      });
      var context = schema.newContext();
      context.validate({
        foo: 'abc'
      });
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Foo failed regular expression validation');
    });
    describe('keyNotInSchema', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: String
      });
      it('normal', function () {
        var context = schema.newContext();
        context.validate({
          bar: 1
        });
        (0, _expect["default"])(context.keyErrorMessage('bar')).toBe('bar is not allowed by the schema');
      });
      it('$set', function () {
        var context = schema.newContext();
        context.validate({
          $set: {
            bar: 1
          }
        }, {
          modifier: true
        });
        (0, _expect["default"])(context.keyErrorMessage('bar')).toBe('bar is not allowed by the schema');
      });
      it('$unset does not complain', function () {
        var context = schema.newContext();
        context.validate({
          $unset: {
            bar: ''
          }
        }, {
          modifier: true
        });
        (0, _expect["default"])(context.isValid()).toBe(true);
      });
    });
    it('should allow labels with apostrophes ("\'") in messages', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: {
          type: String,
          label: 'Manager/supervisor\'s name'
        }
      });
      var context = schema.newContext();
      context.validate({});
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Manager/supervisor\'s name is required');
    });
  });
  describe('multipleSchema', function () {
    var schema = new _SimpleSchema.SimpleSchema({
      foo: String
    });
    schema.messageBox.messages({
      en: {
        required: {
          foo: 'Your foo is required mate'
        }
      }
    });
    var schema2 = new _SimpleSchema.SimpleSchema({
      foo: String,
      bar: Number
    });
    schema2.messageBox.messages({
      en: {
        required: {
          foo: 'Your bar is required for sure'
        }
      }
    });
    it('should keep message boxes separate between objects', function () {
      var context = schema.newContext();
      context.validate({});
      (0, _expect["default"])(context.keyErrorMessage('foo')).toBe('Your foo is required mate');
    });
  });
});