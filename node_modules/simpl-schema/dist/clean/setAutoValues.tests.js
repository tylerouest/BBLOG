"use strict";

var _expect = _interopRequireDefault(require("expect"));

var _SimpleSchema = require("../SimpleSchema");

var _setAutoValues = require("./setAutoValues");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('setAutoValues', function () {
  it('sorts correctly', function () {
    var schema = new _SimpleSchema.SimpleSchema({
      field1: {
        type: String,
        autoValue: function autoValue() {}
      },
      field2: {
        type: String,
        autoValue: function autoValue() {}
      },
      field3: {
        type: Number,
        autoValue: function autoValue() {}
      },
      nested: Object,
      'nested.field1': {
        type: String,
        autoValue: function autoValue() {}
      },
      'nested.field2': {
        type: String,
        autoValue: function autoValue() {}
      },
      'nested.field3': {
        type: String,
        autoValue: function autoValue() {}
      },
      'nested.field4': {
        type: String,
        defaultValue: 'test'
      },
      field4: {
        type: Number,
        autoValue: function autoValue() {}
      },
      field5: {
        type: Number,
        autoValue: function autoValue() {}
      },
      field6: {
        type: String,
        autoValue: function autoValue() {}
      },
      field7: {
        type: String,
        autoValue: function autoValue() {}
      }
    });
    var autoValueFunctions = schema.autoValueFunctions();
    var sorted = (0, _setAutoValues.sortAutoValueFunctions)(autoValueFunctions);
    var FIELD_COUNT = 7;
    var NESTED_FIELD_COUNT = 4; // expecting: field1, field2, ..., field7, nested.field1, ... nested.field4

    var fieldOrder = sorted.map(function (_ref) {
      var fieldName = _ref.fieldName;
      return fieldName;
    });

    for (var i = 0; i < FIELD_COUNT; ++i) {
      (0, _expect["default"])(fieldOrder[i]).toBe("field".concat(i + 1));
    }

    for (var _i = FIELD_COUNT; _i < FIELD_COUNT + NESTED_FIELD_COUNT; ++_i) {
      (0, _expect["default"])(fieldOrder[_i]).toBe("nested.field".concat(_i - FIELD_COUNT + 1));
    }
  });
});