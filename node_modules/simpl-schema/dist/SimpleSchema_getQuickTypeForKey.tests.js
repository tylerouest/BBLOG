"use strict";

var _SimpleSchema = require("./SimpleSchema");

var _expect = _interopRequireDefault(require("expect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema', function () {
  describe('getQuickTypeForKey', function () {
    it('string', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: String
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('string');
    });
    it('number', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: Number
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('number');
    });
    it('int', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: _SimpleSchema.SimpleSchema.Integer
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('number');
    });
    it('boolean', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: Boolean
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('boolean');
    });
    it('date', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: Date
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('date');
    });
    it('object', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: Object
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('object');
    });
    it('stringArray', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [String]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('stringArray');
    });
    it('numberArray', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [Number]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('numberArray');
    });
    it('int array', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [_SimpleSchema.SimpleSchema.Integer]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('numberArray');
    });
    it('booleanArray', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [Boolean]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('booleanArray');
    });
    it('dateArray', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [Date]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('dateArray');
    });
    it('objectArray', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [Object]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('objectArray');
    });
    it('objectArray (subschema)', function () {
      var subschema = new _SimpleSchema.SimpleSchema({
        bar: String
      });
      var schema = new _SimpleSchema.SimpleSchema({
        foo: [subschema]
      });
      var type = schema.getQuickTypeForKey('foo');
      (0, _expect["default"])(type).toBe('objectArray');
    });
  });
});