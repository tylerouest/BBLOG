"use strict";

var _SimpleSchema = require("./SimpleSchema");

var _expect = _interopRequireDefault(require("expect"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema', function () {
  describe('oneOf', function () {
    it('allows either type', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: _SimpleSchema.SimpleSchema.oneOf(String, Number, Date)
      });
      var test1 = {
        foo: 1
      };
      (0, _expect["default"])(function test1func() {
        schema.validate(test1);
      }).toNotThrow();
      (0, _expect["default"])(test1.foo).toBeA('number');
      var test2 = {
        foo: 'bar'
      };
      (0, _expect["default"])(function test2func() {
        schema.validate(test2);
      }).toNotThrow();
      (0, _expect["default"])(test2.foo).toBeA('string');
      var test3 = {
        foo: new Date()
      };
      (0, _expect["default"])(function test2func() {
        schema.validate(test3);
      }).toNotThrow();
      (0, _expect["default"])(test3.foo instanceof Date).toBe(true);
      var test4 = {
        foo: false
      };
      (0, _expect["default"])(function test3func() {
        schema.validate(test4);
      }).toThrow();
      (0, _expect["default"])(test4.foo).toBeA('boolean');
    });
    it.skip('allows either type including schemas', function () {
      var schemaOne = new _SimpleSchema.SimpleSchema({
        itemRef: String,
        partNo: String
      });
      var schemaTwo = new _SimpleSchema.SimpleSchema({
        anotherIdentifier: String,
        partNo: String
      });
      var combinedSchema = new _SimpleSchema.SimpleSchema({
        item: _SimpleSchema.SimpleSchema.oneOf(String, schemaOne, schemaTwo)
      });
      var isValid = combinedSchema.namedContext().validate({
        item: 'foo'
      });
      console.log(combinedSchema.namedContext().validationErrors());
      (0, _expect["default"])(isValid).toBe(true);
      isValid = combinedSchema.namedContext().validate({
        item: {
          anotherIdentifier: 'hhh',
          partNo: 'ttt'
        }
      });
      console.log(combinedSchema.namedContext().validationErrors());
      (0, _expect["default"])(isValid).toBe(true);
      isValid = combinedSchema.namedContext().validate({
        item: {
          itemRef: 'hhh',
          partNo: 'ttt'
        }
      });
      console.log(combinedSchema.namedContext().validationErrors());
      (0, _expect["default"])(isValid).toBe(true);
    });
    it('is valid as long as one min value is met', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: _SimpleSchema.SimpleSchema.oneOf({
          type: _SimpleSchema.SimpleSchema.Integer,
          min: 5
        }, {
          type: _SimpleSchema.SimpleSchema.Integer,
          min: 10
        })
      });
      (0, _expect["default"])(function () {
        schema.validate({
          foo: 7
        });
      }).toNotThrow();
    });
    it('is invalid if neither min value is met', function () {
      var schema = new _SimpleSchema.SimpleSchema({
        foo: _SimpleSchema.SimpleSchema.oneOf({
          type: _SimpleSchema.SimpleSchema.Integer,
          min: 5
        }, {
          type: _SimpleSchema.SimpleSchema.Integer,
          min: 10
        })
      });
      (0, _expect["default"])(function () {
        schema.validate({
          foo: 3
        });
      }).toThrow();
    });
  });
});