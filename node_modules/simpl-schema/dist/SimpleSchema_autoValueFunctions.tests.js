"use strict";

var _expect = _interopRequireDefault(require("expect"));

var _SimpleSchema = require("./SimpleSchema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable func-names, prefer-arrow-callback */
describe('SimpleSchema - autoValueFunctions', function () {
  it('simple', function () {
    var schema = new _SimpleSchema.SimpleSchema({
      a: {
        type: String,
        autoValue: function autoValue() {}
      }
    });
    var autoValueFunctions = schema.autoValueFunctions();
    (0, _expect["default"])(autoValueFunctions.length).toBe(1);
    (0, _expect["default"])(!!autoValueFunctions[0].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[0].fieldName).toBe('a');
    (0, _expect["default"])(autoValueFunctions[0].closestSubschemaFieldName).toBe('');
  });
  it('one level of subschema', function () {
    var subschema = new _SimpleSchema.SimpleSchema({
      z: {
        type: Object,
        autoValue: function autoValue() {}
      }
    });
    var schema = new _SimpleSchema.SimpleSchema({
      a: {
        type: Object,
        autoValue: function autoValue() {}
      },
      'a.b': {
        type: String,
        autoValue: function autoValue() {}
      },
      c: {
        type: subschema
      }
    });
    var autoValueFunctions = schema.autoValueFunctions();
    (0, _expect["default"])(autoValueFunctions.length).toBe(3);
    (0, _expect["default"])(!!autoValueFunctions[0].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[0].fieldName).toBe('a');
    (0, _expect["default"])(autoValueFunctions[0].closestSubschemaFieldName).toBe('');
    (0, _expect["default"])(!!autoValueFunctions[1].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[1].fieldName).toBe('a.b');
    (0, _expect["default"])(autoValueFunctions[1].closestSubschemaFieldName).toBe('');
    (0, _expect["default"])(!!autoValueFunctions[2].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[2].fieldName).toBe('c.z');
    (0, _expect["default"])(autoValueFunctions[2].closestSubschemaFieldName).toBe('c');
  });
  it('two levels of subschemas', function () {
    var subschema1 = new _SimpleSchema.SimpleSchema({
      x: {
        type: Object,
        autoValue: function autoValue() {}
      },
      'x.m': {
        type: Array,
        autoValue: function autoValue() {}
      },
      'x.m.$': {
        type: String
      }
    });
    var subschema2 = new _SimpleSchema.SimpleSchema({
      z: {
        type: Object,
        autoValue: function autoValue() {}
      },
      'z.y': {
        type: subschema1
      }
    });
    var schema = new _SimpleSchema.SimpleSchema({
      a: {
        type: Object,
        autoValue: function autoValue() {}
      },
      'a.b': {
        type: String,
        autoValue: function autoValue() {}
      },
      c: {
        type: subschema2
      }
    });
    var autoValueFunctions = schema.autoValueFunctions();
    (0, _expect["default"])(autoValueFunctions.length).toBe(5);
    (0, _expect["default"])(!!autoValueFunctions[0].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[0].fieldName).toBe('a');
    (0, _expect["default"])(autoValueFunctions[0].closestSubschemaFieldName).toBe('');
    (0, _expect["default"])(!!autoValueFunctions[1].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[1].fieldName).toBe('a.b');
    (0, _expect["default"])(autoValueFunctions[1].closestSubschemaFieldName).toBe('');
    (0, _expect["default"])(!!autoValueFunctions[2].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[2].fieldName).toBe('c.z');
    (0, _expect["default"])(autoValueFunctions[2].closestSubschemaFieldName).toBe('c');
    (0, _expect["default"])(!!autoValueFunctions[3].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[3].fieldName).toBe('c.z.y.x');
    (0, _expect["default"])(autoValueFunctions[3].closestSubschemaFieldName).toBe('c.z.y');
    (0, _expect["default"])(!!autoValueFunctions[4].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[4].fieldName).toBe('c.z.y.x.m');
    (0, _expect["default"])(autoValueFunctions[4].closestSubschemaFieldName).toBe('c.z.y');
  });
  it('array of objects', function () {
    var subschema = new _SimpleSchema.SimpleSchema({
      z: {
        type: String,
        autoValue: function autoValue() {}
      }
    });
    var schema = new _SimpleSchema.SimpleSchema({
      a: {
        type: Object,
        autoValue: function autoValue() {}
      },
      'a.b': {
        type: Array
      },
      'a.b.$': {
        type: subschema
      }
    });
    var autoValueFunctions = schema.autoValueFunctions();
    (0, _expect["default"])(autoValueFunctions.length).toBe(2);
    (0, _expect["default"])(!!autoValueFunctions[0].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[0].fieldName).toBe('a');
    (0, _expect["default"])(autoValueFunctions[0].closestSubschemaFieldName).toBe('');
    (0, _expect["default"])(!!autoValueFunctions[1].func).toBe(true);
    (0, _expect["default"])(autoValueFunctions[1].fieldName).toBe('a.b.$.z');
    (0, _expect["default"])(autoValueFunctions[1].closestSubschemaFieldName).toBe('a.b.$');
  });
});